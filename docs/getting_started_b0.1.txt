# Building on the Build Host

This sequence was tested on Ubuntu 11.0, using root permissions

## Setup environment

First setup GIT:

    apt-get install git-core

Setup kernel build environment:

    apt-get install build-essential

    apt-get install libncurses5 libncurses5-dev

Setup initrd.img related tools:

    apt-get install multipath-tools kpartx arping dracut

We export Build hosts' root directory via NFS, to be later used by Target
hosts

First install NFS server package:

    apt-get install nfs-kernel-server

    chkconfig nfsserver on

Export / directory by adding the below to /etc/exports:

    / *(rw)

Refresh the NFS server

    service nfs-kernel-server restart

## Building the kernel

First download the [linux-heca repository](https://github.com/hecatonchire
/linux-heca) from github, using:

    git clone http://github.com/hecatonchire/linux-heca.git

An optional (but recommended) step is to download the .config file from the
following URL into the linux-heca folder to make the kernel installation
procedure a bit easier.

    wget https://raw.github.com/hecatonchire/heca-misc/master/kernel/.config

Inside the linux-heca directory, to build the kernel, first run make
menuconfig. Select any additional kernel modules to install as required.

    make menuconfig

Make sure you have enough free space on the disk (minimum of 20 GBs)

    df -h .

Invoke a parallel kernel build using all cores

    make -j`nproc`

    make -j`nproc` modules

# Execution on the Target Host

This sequence was tested on Ubuntu 10.10, using root permissions

## Setup environment

First setup GIT:

    apt-get install git-core

Setup kernel debug environment:

    apt-get install fakeroot build-essential crash kexec-tools

    apt-get install makedumpfile kernel-wedge

    apt-get install libncurses5 libncurses5-dev libelf-dev binutils-dev

Add RDMA packages:

    apt-get install libibverbs1 libibcm1 libibcm-dev

    apt-get install libibverbs-dev libibcommon1 ibverbs-utils

Setup permissions to access RDMA/IB devices by ensuring that file
/etc/udev/rules.d/40-ib.rules has at-least the following lines:

    KERNEL=="umad*", NAME="infiniband/%k"

    KERNEL=="issm*", NAME="infiniband/%k"

    KERNEL=="ucm*", NAME="infiniband/%k", MODE="0666"

    KERNEL=="uverbs*", NAME="infiniband/%k", MODE="0666"

    KERNEL=="uat", NAME="infiniband/%k", MODE="0666"

    KERNEL=="ucma", NAME="infiniband/%k", MODE="0666"

    KERNEL=="rdma_cm", NAME="infiniband/%k", MODE="0666"

Setup NFS access to the Build hosts' root directory

    mkdir -p /mount/builder

    mount -t nfs builder:/ /mount/builder

    cd /mount/builder

## Installing the kernel

To install the kernel, execute the following commands (in the kernel build
directory):

    make install

    make modules_install

    make headers_install

Create new init-RAM-disk:

    rm -f /boot/initrd.img-`make kernelrelease`

    dracut -l -f /boot/initrd.img-`make kernelrelease`

    lsinitramfs /boot/initrd.img-`make kernelrelease`

Refresh GRUB bootloader entries:

    update-grub2

Next, reboot the machine and boot into the new kernel.

You will now need to setup the rdma modules. Run the following commands (or
add them to /etc/rc.local):

    modprobe rdma_cm

    modprobe ib_uverbs

    modprobe rdma_ucm

To use with soft iWARP (requires no special RDMA configuration), load the siw
module

    modprobe siw

NOTE: if you have NICs/HBAs that support RDMA (Infiniband, Iwarp, RoCE, etc..)
you will need to configure them so they can be used with rdmacm and libibverbs

Lastly, setup the new heca dsm_rdma module

    modprobe dsm_rdma ip=IP port=PORT

You can check that everything has been loaded correctly by running dmesg and
checking for any errors.

## Installing libheca

While it is possible to interact with Hecatonchire Kernel directly via the
exposed ioctl interface, we also provide a wrapper named libheca, exposing an
simpler user-mode API.

The libheca is available from the [libheca
repository](https://github.com/hecatonchire/libheca) from github. This can be
done by cloning the source with git using this command:

    git clone http://github.com/hecatonchire/libheca.git

Navigate to the libheca folder and build and install by running:

    make libheca

## libheca sanity test

To run a simple sanity test, navigate to the test directory under libheca. In
the conf folder, create a configuration file with the ip address and rdma
service nfs-kernel-server restart port of one or more nodes using the
templates provided. To run the test, on the server node, run:

    ./tst <conf_file>

On the client node, run:

    ./tst <conf_file> <node_id>

where with just a single client node, the node_id will be 2.

The master node needs to be initialized first, then the client. After that,
the onscreen numbering should be followed to demonstrate the heca system in
action.

